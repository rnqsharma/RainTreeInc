import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map.Entry;

public class ReadFile {

	// Gets the number of Files in the folder
	int counter = 0;
	
	String getUserDateInputFrom = "";
	String getUserDateInputTo = "";
	
	LinkedHashMap<String, Integer> numberOfDisconnectsMap = new LinkedHashMap<>();
	
	// Gets the TO and FROM Date
	public ReadFile(String getUserDateInputFrom, String getUserDateInputTo) {
		this.getUserDateInputFrom = getUserDateInputFrom;
		this.getUserDateInputTo = getUserDateInputTo;
	}

	
	// Loops through the files from the folder
	public void listFilesForFolder(File folder) {
		System.out.println(folder.exists());
		for (final File fileEntry : folder.listFiles()) {
			if (fileEntry.isDirectory()) {
				listFilesForFolder(fileEntry);
			} else {
				// Calling the method where all the String Formatting is done and Report is generated by passing the file to the method
				readFile(fileEntry);
			}
		}
		System.out.println("Total number of Files " + counter);


		// Prints the Report
		System.out.println("NUMBER OF DISCONNECTS");
		for(Entry<String, Integer> mm : numberOfDisconnectsMap.entrySet()){
			System.out.println(mm.getKey() + "----" + mm.getValue());
		}
	}

	// File is read and Formatting is done
	public void readFile(File file) {
		++counter;
		try {

			BufferedReader in = new BufferedReader(new FileReader(file));
			String line;
			
			// Reads the file line by line
			while((line = in.readLine()) != null) {
				
				// Removes all the unnecessary spaces and new lines from the line
				line = line.replaceAll("\r", "").replaceAll("\n", "");
				if(!line.equals("")) {			

					// Spilts the line with "|" delimiter 
					String detailLogs[] = line.split("\\|");
					
					// Removes all the unnecessary spaces and new lines from the splitted strings
					detailLogs[0] = detailLogs[0].replaceAll("\r", "").replaceAll("\n", "");
					detailLogs[1] = detailLogs[1].replaceAll("\r", "").replaceAll("\n", "");
					detailLogs[2] = detailLogs[2].replaceAll("\r", "").replaceAll("\n", "");

					// Spilts the string to get the ComputerName
					String name[] = detailLogs[0].split(" ");
					// Gets the ComputerName from the string
					String pcName = name[1];
					
					String date = "";
					// Gets the date of the log
					for(int i=2; i<=6; i++) {
						date += String.valueOf(detailLogs[1].charAt(i));
					}

					// if ComputerName is already there in the map than increment the counter by 1
					if(numberOfDisconnectsMap.containsKey(pcName)) {

						// Determines if the date of the log lies in the range of To and From Date
						if(Integer.parseInt(getUserDateInputFrom.split("-")[0]) <= Integer.parseInt(date.split("/")[1]) && 
								Integer.parseInt(getUserDateInputFrom.split("-")[1]) <= Integer.parseInt(date.split("/")[0]) ||
								Integer.parseInt(getUserDateInputTo.split("-")[0]) >= Integer.parseInt(date.split("/")[1]) && 
								Integer.parseInt(getUserDateInputTo.split("-")[1]) >= Integer.parseInt(date.split("/")[0])    ) {



							// Increments the Number of Disconnects of the ComputerName
							if(detailLogs[2].equals(" Client is disconnected from agent.")) {

								Integer disconnects  = numberOfDisconnectsMap.get(pcName);

								if(disconnects != null) {

									numberOfDisconnectsMap.put(pcName, ++disconnects);

								}
							}


						}
					} else { 	// if ComputerName is not in the map than add it.

						if(detailLogs[2].equals(" Client is disconnected from agent.")) {


							if(Integer.parseInt(getUserDateInputFrom.split("-")[0]) <= Integer.parseInt(date.split("/")[1]) && 
									Integer.parseInt(getUserDateInputFrom.split("-")[1]) <= Integer.parseInt(date.split("/")[0]) ||
									Integer.parseInt(getUserDateInputTo.split("-")[0]) >= Integer.parseInt(date.split("/")[1]) && 
									Integer.parseInt(getUserDateInputTo.split("-")[1]) >= Integer.parseInt(date.split("/")[0])    ) {

								if(detailLogs[2].equals(" Client is disconnected from agent.")) {
									numberOfDisconnectsMap.put(pcName, 1);
								} else {
									numberOfDisconnectsMap.put(pcName, 0);
								}
							} else {
								numberOfDisconnectsMap.put(pcName, 0);
							}
						}
					}

				}
			}

			in.close();
		} catch(IOException ie) {

			ie.printStackTrace();

		}



	}
}
